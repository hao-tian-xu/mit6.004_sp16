////////////////////////////////////////////////////////////////////////////////
// Lab 4
////////////////////////////////////////////////////////////////////////////////

// Include the checkoff program:
.include "checkoff.uasm"

// Leave the following as zero to run ALL the test cases, and get your solution
//   validated if all pass.  If you have trouble with test case N, set it to N
//   to run JUST that test case (for easier debugging):
TestCase:       LONG(0)

// Quicksort-in-place code.  We include the C/Python version here as a comment;
// you can use this as a model for your Beta assembly version:

//def partition(array,left,right):
//    # choose middle element of array as pivot
//    pivotIndex = (left+right) >> 1;
//    pivotValue = array[pivotIndex]
//
//    # swap array[right] and array[pivotIndex]
//    # note that we already store array[pivotIndex] in pivotValue
//    array[pivotIndex] = array[right]
//
//    # elements <= the pivot are moved to the left (smaller indices)
//    storeIndex = left
//    for i in xrange(left,right):  # don't include array[right]
//        temp = array[i]
//        if temp <= pivotValue:
//            array[i] = array[storeIndex]
//            array[storeIndex] = temp
//            storeIndex += 1
//
//    # move pivot to its final place
//    array[right] = array[storeIndex]
//    array[storeIndex] = pivotValue;
//    return storeIndex;

partition:
        PUSH(LP)
        PUSH(BP)
        MOVE(SP, BP)

// Fill in your code here...
		p_array			= R1		// symbolic names
		p_left			= R2
		p_right			= R3
		p_pivotIndex	= R4
		p_pivotValue	= R5
		p_storeIndex	= R6
		p_i				= R7
		
		PUSH(R1)
		PUSH(R2)
		PUSH(R3)
		PUSH(R4)
		PUSH(R5)
		PUSH(R6)
		PUSH(R7)
		PUSH(R8)
		PUSH(R9)
		PUSH(R10)
		LD(BP, -12, p_array)
		LD(BP, -16, p_left)
		LD(BP, -20, p_right)		// prologue
		
//		# choose middle element of array as pivot
		ADD(p_left, p_right, R0)	// R0 = left+right
		SRAC(R0, 1, p_pivotIndex)	// pivotIndex = R0 >> 1
		SHLC(p_pivotIndex, 2, R0)	// R0 = pivotIndex * 4
		ADD(R0, p_array, R8)		// R8 = address of array[pivotIndex]
		LD(R8, 0, p_pivotValue)		// pivotValue
		
//   	# swap array[right] and array[pivotIndex]
		SHLC(p_right, 2, R0)		// R0 = right * 4
		ADD(R0, p_array, R0)		// R0 = address of array[right]
		LD(R0, 0, R0)				// R0 = array[right]
		ST(R0, 0, R8)				// array[pivotIndex] = R0
		
//		# elements <= the pivot are moved to the left (smaller indices)
		MOVE(p_left, p_storeIndex)
		MOVE(p_left, p_i)
p_loop:
		CMPLT(p_i, p_right, R0)		// R0: if i < right
		BEQ(R0, p_loop_out)			// false, loop end
		
		SHLC(p_i, 2, R0)			// R0 = i * 4
		ADD(R0, p_array, R0)		// R0 = address of array[i]
		LD(R0, 0, R8)				// R8 = array[i]
		
		CMPLE(R8, p_pivotValue, R9)	// R9: if array[i] <= pivotValue
		ADDC(p_i, 1, p_i)			// i++
		BEQ(R9, p_loop)				// false, continue
		
		SHLC(p_storeIndex, 2, R10)	// R10 = storeIndex * 4
		ADD(R10, p_array, R10)		// R10 = address of array[storeIndex]
		LD(R10, 0, R9)				// R9 = array[storeIndex]
		ST(R9, 0, R0)				// array[i] = array[storeIndex]
		ST(R8, 0, R10)				// array[storeIndex] = array[i]
		ADDC(p_storeIndex, 1, p_storeIndex)
		BR(p_loop)
		
p_loop_out:
		SHLC(p_storeIndex, 2, R10)	// R10 = storeIndex * 4
		ADD(R10, p_array, R10)		// R10 = address of array[storeIndex]
		LD(R10, 0, R9)				// R9 = array[storeIndex]
		
		SHLC(p_right, 2, R0)		// R0 = right * 4
		ADD(R0, p_array, R0)		// R0 = address of array[right]
		
		ST(R9, 0, R0)				// array[right] = array[storeIndex]
		ST(p_pivotValue, 0, R10)	// array[storeIndex] = pivotValue
		MOVE(p_storeIndex, R0)		// return storeIndex

		POP(R10)					// epilogue
		POP(R9)
		POP(R8)
		POP(R7)
		POP(R6)
		POP(R5)
		POP(R4)
		POP(R3)
		POP(R2)
		POP(R1)

        MOVE(BP, SP)
        POP(BP)
        POP(LP)
        JMP(LP)


//def quicksort(array, left, right):
//    if left < right:
//        pivotIndex = partition(array,left,right)
//        quicksort(array,left,pivotIndex-1)
//        quicksort(array,pivotIndex+1,right)

// quicksort(ArrayBase, left, right)
quicksort:
        PUSH(LP)
        PUSH(BP)
        MOVE(SP, BP)
		
// Fill in your code here...
		PUSH(R1)
		PUSH(R2)
		PUSH(R3)
		PUSH(R4)
		PUSH(R5)
		LD(BP, -16, R2)
		LD(BP, -20, R3)		// prologue
		
		CMPLT(R2, R3, R0)	// if left < right
		BEQ(R0, q_return)	// false, return

		LD(BP, -12, R1)		// true
		PUSH(R3)			// partition(array,left,right)
		PUSH(R2)
		PUSH(R1)
		BR(partition, LP)
		DEALLOCATE(3)
		MOVE(R0, R4)
		
		SUBC(R4, 1, R5)		// quicksort(array,left,pivotIndex-1)
		PUSH(R5)
		PUSH(R2)
		PUSH(R1)
		BR(quicksort, LP)
		DEALLOCATE(3)
		
		ADDC(R4, 1, R5)		// quicksort(array,pivotIndex+1,right)
		PUSH(R3)
		PUSH(R5)
		PUSH(R1)	
		BR(quicksort, LP)
		DEALLOCATE(3)
		
q_return:
		POP(R5)				// epilogue
		POP(R4)
		POP(R3)
		POP(R2)
		POP(R1)

        MOVE(BP, SP)
        POP(BP)
        POP(LP)
        JMP(LP)

// Allocate a stack: SP is initialized by checkoff code.
StackBasePtr:
        LONG(StackArea)

.unprotect

StackArea:
        STORAGE(1000)
